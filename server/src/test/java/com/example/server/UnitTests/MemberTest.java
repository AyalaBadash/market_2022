package com.example.server.UnitTests;

import com.example.server.businessLayer.Market.ResourcesObjects.MarketException;
import com.example.server.businessLayer.Market.Appointment.ShopOwnerAppointment;
import com.example.server.businessLayer.Market.AcquisitionHistory;
import com.example.server.businessLayer.Market.ShoppingCart;
import org.junit.jupiter.api.Test;
import com.example.server.businessLayer.Market.Appointment.Appointment;
import com.example.server.businessLayer.Market.Users.Member;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class MemberTest {

    Member member;
    String name = "moshe";
    ShoppingCart myCart = Mockito.mock(ShoppingCart.class);
    ShoppingCart oldCart = Mockito.mock(ShoppingCart.class);
    List<Appointment> appointedByMe = new ArrayList<>();
    List<Appointment> myAppointments = new ArrayList<>();
    List<ShoppingCart> purchaseHistory = new ArrayList<>();
    int nextCartID;

    @BeforeEach
    public void initMemberTest() throws MarketException {
        member = new Member(name);
        nextCartID=2;
        member.setMyCart(myCart);

    }

    //TODO need to check for name as visitor12 (autogeneratedName)...
    @Test
    @DisplayName("invalid inputs to constructor")
    public void constructorInvalid(){
        try{
            Member m = new Member(null);
            m = new Member("");
            assert false;
            m = new Member("asd@sad");
            assert false;
            m = new Member("asd!@!@#)@#$)(($#%&]sad");
            assert false;
            m = new Member("asd[]`/");
            assert false;
            m = new Member("test name");
            assert false;
            m = new Member("test_name");
            assert false;
            // TODO should catch market exception
        }catch (Exception ignore){};
        assert true;
    }

    @Test
    @DisplayName("valid inputs to constructor")
    public void constructorValid(){
        try{
            new Member(name);
        }catch (Exception ignore){};
        assert true;
    }

    @BeforeEach
    @Test
    public void getName() {
        Assertions.assertEquals(member.getName(),name);
    }


    @Test
    public void getMyCart() {
        Assertions.assertEquals(member.getMyCart(), myCart);
    }


    @Test
    public void addAppointmentByMe() {

        ShopOwnerAppointment shopOwnerAppointment = Mockito.mock(ShopOwnerAppointment.class);
        member.addAppointmentByMe(shopOwnerAppointment);
        assertEquals(1, member.getAppointedByMe().size());
    }

    @Test
    public void addAppointmentToMe() {
        ShopOwnerAppointment shopOwnerAppointment = Mockito.mock(ShopOwnerAppointment.class);
        member.addAppointmentToMe(shopOwnerAppointment);
        assertEquals(1, member.getMyAppointments().size());
    }

    @Test
    public void getPurchaseHistory() {//TODO redo
        String test = member.getReview().toString();
        Assertions.assertEquals(test,String.format ("%s:\n", member.getName ()));
        AcquisitionHistory acq = new AcquisitionHistory(myCart, name, myCart.getCurrentPrice(), myCart.getCurrentPrice());
        member.savePurchase(acq);
        Assertions.assertTrue(member.getPurchaseHistory().size() == 1);
        Assertions.assertTrue(member.getReview().toString().contains(name));
    }

}